# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from .builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseProfile(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Profile']] = 'Profile'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProfileActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProfileActions[_PrismaModelT](client or get_client(), cls)


class BaseFollow(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Follow']] = 'Follow'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.FollowActions[_PrismaModelT]':
        from .client import get_client

        return actions.FollowActions[_PrismaModelT](client or get_client(), cls)


class BasePost(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Post']] = 'Post'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PostActions[_PrismaModelT]':
        from .client import get_client

        return actions.PostActions[_PrismaModelT](client or get_client(), cls)


class BasePostTag(_PrismaModel):
    __prisma_model__: ClassVar[Literal['PostTag']] = 'PostTag'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PostTagActions[_PrismaModelT]':
        from .client import get_client

        return actions.PostTagActions[_PrismaModelT](client or get_client(), cls)


class BasePostImage(_PrismaModel):
    __prisma_model__: ClassVar[Literal['PostImage']] = 'PostImage'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PostImageActions[_PrismaModelT]':
        from .client import get_client

        return actions.PostImageActions[_PrismaModelT](client or get_client(), cls)


class BaseGroup(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Group']] = 'Group'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.GroupActions[_PrismaModelT]':
        from .client import get_client

        return actions.GroupActions[_PrismaModelT](client or get_client(), cls)


class BaseMember(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Member']] = 'Member'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MemberActions[_PrismaModelT]':
        from .client import get_client

        return actions.MemberActions[_PrismaModelT](client or get_client(), cls)


class BaseComment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Comment']] = 'Comment'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommentActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommentActions[_PrismaModelT](client or get_client(), cls)


class BasePostLike(_PrismaModel):
    __prisma_model__: ClassVar[Literal['PostLike']] = 'PostLike'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PostLikeActions[_PrismaModelT]':
        from .client import get_client

        return actions.PostLikeActions[_PrismaModelT](client or get_client(), cls)


class BaseCommentLike(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CommentLike']] = 'CommentLike'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommentLikeActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommentLikeActions[_PrismaModelT](client or get_client(), cls)


class BaseRestaurant(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Restaurant']] = 'Restaurant'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RestaurantActions[_PrismaModelT]':
        from .client import get_client

        return actions.RestaurantActions[_PrismaModelT](client or get_client(), cls)


