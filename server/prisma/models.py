# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from .builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class Profile(bases.BaseProfile):
    """Represents a Profile record"""

    id: _str
    email: _str
    username: _str
    imageUrl: Optional[_str] = None
    public: _bool
    followsFollowing: Optional[List['models.Follow']] = None
    followsFollowed: Optional[List['models.Follow']] = None
    posts: Optional[List['models.Post']] = None
    postTags: Optional[List['models.PostTag']] = None
    members: Optional[List['models.Member']] = None
    comments: Optional[List['models.Comment']] = None
    postLikes: Optional[List['models.PostLike']] = None
    commentLikes: Optional[List['models.CommentLike']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ProfileKeys']] = None,
        exclude: Optional[Iterable['types.ProfileKeys']] = None,
        required: Optional[Iterable['types.ProfileKeys']] = None,
        optional: Optional[Iterable['types.ProfileKeys']] = None,
        relations: Optional[Mapping['types.ProfileRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ProfileKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Profile_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Profile_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Profile_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Profile_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Profile_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Profile_relational_fields:
                        raise errors.UnknownRelationalFieldError('Profile', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Profile / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Profile',
            }
        )
        _created_partial_types.add(name)


class Follow(bases.BaseFollow):
    """Represents a Follow record"""

    id: _str
    following: Optional['models.Profile'] = None
    followingId: _str
    followed: Optional['models.Profile'] = None
    followedId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.FollowKeys']] = None,
        exclude: Optional[Iterable['types.FollowKeys']] = None,
        required: Optional[Iterable['types.FollowKeys']] = None,
        optional: Optional[Iterable['types.FollowKeys']] = None,
        relations: Optional[Mapping['types.FollowRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.FollowKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Follow_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Follow_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Follow_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Follow_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Follow_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Follow_relational_fields:
                        raise errors.UnknownRelationalFieldError('Follow', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Follow / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Follow',
            }
        )
        _created_partial_types.add(name)


class Post(bases.BasePost):
    """Represents a Post record"""

    id: _str
    individual: _bool
    meal: 'enums.MealType'
    restaurant: Optional['models.Restaurant'] = None
    restaurantId: _str
    group: Optional['models.Group'] = None
    groupId: Optional[_str] = None
    profile: Optional['models.Profile'] = None
    profileId: Optional[_str] = None
    comments: Optional[List['models.Comment']] = None
    likes: Optional[List['models.PostLike']] = None
    postTags: Optional[List['models.PostTag']] = None
    postImages: Optional[List['models.PostImage']] = None
    review: _str
    rating: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostKeys']] = None,
        exclude: Optional[Iterable['types.PostKeys']] = None,
        required: Optional[Iterable['types.PostKeys']] = None,
        optional: Optional[Iterable['types.PostKeys']] = None,
        relations: Optional[Mapping['types.PostRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PostKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Post_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Post_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Post_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Post_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Post_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Post_relational_fields:
                        raise errors.UnknownRelationalFieldError('Post', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Post / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Post',
            }
        )
        _created_partial_types.add(name)


class PostTag(bases.BasePostTag):
    """Represents a PostTag record"""

    id: _str
    post: Optional['models.Post'] = None
    postId: _str
    profile: Optional['models.Profile'] = None
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostTagKeys']] = None,
        exclude: Optional[Iterable['types.PostTagKeys']] = None,
        required: Optional[Iterable['types.PostTagKeys']] = None,
        optional: Optional[Iterable['types.PostTagKeys']] = None,
        relations: Optional[Mapping['types.PostTagRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PostTagKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _PostTag_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _PostTag_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _PostTag_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _PostTag_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _PostTag_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _PostTag_relational_fields:
                        raise errors.UnknownRelationalFieldError('PostTag', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid PostTag / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'PostTag',
            }
        )
        _created_partial_types.add(name)


class PostImage(bases.BasePostImage):
    """Represents a PostImage record"""

    id: _str
    post: Optional['models.Post'] = None
    postId: _str
    imageUrl: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostImageKeys']] = None,
        exclude: Optional[Iterable['types.PostImageKeys']] = None,
        required: Optional[Iterable['types.PostImageKeys']] = None,
        optional: Optional[Iterable['types.PostImageKeys']] = None,
        relations: Optional[Mapping['types.PostImageRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PostImageKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _PostImage_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _PostImage_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _PostImage_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _PostImage_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _PostImage_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _PostImage_relational_fields:
                        raise errors.UnknownRelationalFieldError('PostImage', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid PostImage / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'PostImage',
            }
        )
        _created_partial_types.add(name)


class Group(bases.BaseGroup):
    """Represents a Group record"""

    id: _str
    name: _str
    description: _str
    members: Optional[List['models.Member']] = None
    posts: Optional[List['models.Post']] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.GroupKeys']] = None,
        exclude: Optional[Iterable['types.GroupKeys']] = None,
        required: Optional[Iterable['types.GroupKeys']] = None,
        optional: Optional[Iterable['types.GroupKeys']] = None,
        relations: Optional[Mapping['types.GroupRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.GroupKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Group_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Group_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Group_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Group_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Group_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Group_relational_fields:
                        raise errors.UnknownRelationalFieldError('Group', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Group / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Group',
            }
        )
        _created_partial_types.add(name)


class Member(bases.BaseMember):
    """Represents a Member record"""

    id: _str
    profile: Optional['models.Profile'] = None
    profileId: _str
    group: Optional['models.Group'] = None
    groupId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MemberKeys']] = None,
        exclude: Optional[Iterable['types.MemberKeys']] = None,
        required: Optional[Iterable['types.MemberKeys']] = None,
        optional: Optional[Iterable['types.MemberKeys']] = None,
        relations: Optional[Mapping['types.MemberRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MemberKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Member_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Member_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Member_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Member_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Member_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Member_relational_fields:
                        raise errors.UnknownRelationalFieldError('Member', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Member / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Member',
            }
        )
        _created_partial_types.add(name)


class Comment(bases.BaseComment):
    """Represents a Comment record"""

    id: _str
    message: _str
    replies: Optional[List['models.Comment']] = None
    likes: Optional[List['models.CommentLike']] = None
    parent: Optional['models.Comment'] = None
    parentId: Optional[_str] = None
    post: Optional['models.Post'] = None
    postId: _str
    profile: Optional['models.Profile'] = None
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommentKeys']] = None,
        exclude: Optional[Iterable['types.CommentKeys']] = None,
        required: Optional[Iterable['types.CommentKeys']] = None,
        optional: Optional[Iterable['types.CommentKeys']] = None,
        relations: Optional[Mapping['types.CommentRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommentKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Comment_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Comment_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Comment_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Comment_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Comment_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Comment_relational_fields:
                        raise errors.UnknownRelationalFieldError('Comment', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Comment / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Comment',
            }
        )
        _created_partial_types.add(name)


class PostLike(bases.BasePostLike):
    """Represents a PostLike record"""

    id: _str
    post: Optional['models.Post'] = None
    postId: _str
    profile: Optional['models.Profile'] = None
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostLikeKeys']] = None,
        exclude: Optional[Iterable['types.PostLikeKeys']] = None,
        required: Optional[Iterable['types.PostLikeKeys']] = None,
        optional: Optional[Iterable['types.PostLikeKeys']] = None,
        relations: Optional[Mapping['types.PostLikeRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PostLikeKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _PostLike_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _PostLike_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _PostLike_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _PostLike_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _PostLike_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _PostLike_relational_fields:
                        raise errors.UnknownRelationalFieldError('PostLike', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid PostLike / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'PostLike',
            }
        )
        _created_partial_types.add(name)


class CommentLike(bases.BaseCommentLike):
    """Represents a CommentLike record"""

    id: _str
    comment: Optional['models.Comment'] = None
    commentId: _str
    profile: Optional['models.Profile'] = None
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommentLikeKeys']] = None,
        exclude: Optional[Iterable['types.CommentLikeKeys']] = None,
        required: Optional[Iterable['types.CommentLikeKeys']] = None,
        optional: Optional[Iterable['types.CommentLikeKeys']] = None,
        relations: Optional[Mapping['types.CommentLikeRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommentLikeKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _CommentLike_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _CommentLike_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _CommentLike_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _CommentLike_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _CommentLike_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _CommentLike_relational_fields:
                        raise errors.UnknownRelationalFieldError('CommentLike', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid CommentLike / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'CommentLike',
            }
        )
        _created_partial_types.add(name)


class Restaurant(bases.BaseRestaurant):
    """Represents a Restaurant record"""

    id: _str
    name: _str
    yelpId: _str
    latitude: _str
    longitude: _str
    posts: Optional[List['models.Post']] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.RestaurantKeys']] = None,
        exclude: Optional[Iterable['types.RestaurantKeys']] = None,
        required: Optional[Iterable['types.RestaurantKeys']] = None,
        optional: Optional[Iterable['types.RestaurantKeys']] = None,
        relations: Optional[Mapping['types.RestaurantRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.RestaurantKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Restaurant_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Restaurant_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Restaurant_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Restaurant_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Restaurant_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Restaurant_relational_fields:
                        raise errors.UnknownRelationalFieldError('Restaurant', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Restaurant / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Restaurant',
            }
        )
        _created_partial_types.add(name)



_Profile_relational_fields: Set[str] = {
        'followsFollowing',
        'followsFollowed',
        'posts',
        'postTags',
        'members',
        'comments',
        'postLikes',
        'commentLikes',
    }
_Profile_fields: Dict['types.ProfileKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('username', {
            'name': 'username',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('imageUrl', {
            'name': 'imageUrl',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('public', {
            'name': 'public',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('followsFollowing', {
            'name': 'followsFollowing',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Follow\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('followsFollowed', {
            'name': 'followsFollowed',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Follow\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('posts', {
            'name': 'posts',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Post\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('postTags', {
            'name': 'postTags',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.PostTag\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('members', {
            'name': 'members',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Member\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('comments', {
            'name': 'comments',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Comment\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('postLikes', {
            'name': 'postLikes',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.PostLike\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('commentLikes', {
            'name': 'commentLikes',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommentLike\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Follow_relational_fields: Set[str] = {
        'following',
        'followed',
    }
_Follow_fields: Dict['types.FollowKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('following', {
            'name': 'following',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('followingId', {
            'name': 'followingId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('followed', {
            'name': 'followed',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('followedId', {
            'name': 'followedId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Post_relational_fields: Set[str] = {
        'restaurant',
        'group',
        'profile',
        'comments',
        'likes',
        'postTags',
        'postImages',
    }
_Post_fields: Dict['types.PostKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('individual', {
            'name': 'individual',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('meal', {
            'name': 'meal',
            'is_list': False,
            'optional': False,
            'type': 'enums.MealType',
            'is_relational': False,
            'documentation': None,
        }),
        ('restaurant', {
            'name': 'restaurant',
            'is_list': False,
            'optional': True,
            'type': 'models.Restaurant',
            'is_relational': True,
            'documentation': None,
        }),
        ('restaurantId', {
            'name': 'restaurantId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('group', {
            'name': 'group',
            'is_list': False,
            'optional': True,
            'type': 'models.Group',
            'is_relational': True,
            'documentation': None,
        }),
        ('groupId', {
            'name': 'groupId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('comments', {
            'name': 'comments',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Comment\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('likes', {
            'name': 'likes',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.PostLike\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('postTags', {
            'name': 'postTags',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.PostTag\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('postImages', {
            'name': 'postImages',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.PostImage\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('review', {
            'name': 'review',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('rating', {
            'name': 'rating',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_PostTag_relational_fields: Set[str] = {
        'post',
        'profile',
    }
_PostTag_fields: Dict['types.PostTagKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('post', {
            'name': 'post',
            'is_list': False,
            'optional': True,
            'type': 'models.Post',
            'is_relational': True,
            'documentation': None,
        }),
        ('postId', {
            'name': 'postId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_PostImage_relational_fields: Set[str] = {
        'post',
    }
_PostImage_fields: Dict['types.PostImageKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('post', {
            'name': 'post',
            'is_list': False,
            'optional': True,
            'type': 'models.Post',
            'is_relational': True,
            'documentation': None,
        }),
        ('postId', {
            'name': 'postId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('imageUrl', {
            'name': 'imageUrl',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Group_relational_fields: Set[str] = {
        'members',
        'posts',
    }
_Group_fields: Dict['types.GroupKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('members', {
            'name': 'members',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Member\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('posts', {
            'name': 'posts',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Post\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Member_relational_fields: Set[str] = {
        'profile',
        'group',
    }
_Member_fields: Dict['types.MemberKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('group', {
            'name': 'group',
            'is_list': False,
            'optional': True,
            'type': 'models.Group',
            'is_relational': True,
            'documentation': None,
        }),
        ('groupId', {
            'name': 'groupId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Comment_relational_fields: Set[str] = {
        'replies',
        'likes',
        'parent',
        'post',
        'profile',
    }
_Comment_fields: Dict['types.CommentKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('message', {
            'name': 'message',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('replies', {
            'name': 'replies',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Comment\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('likes', {
            'name': 'likes',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommentLike\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('parent', {
            'name': 'parent',
            'is_list': False,
            'optional': True,
            'type': 'models.Comment',
            'is_relational': True,
            'documentation': None,
        }),
        ('parentId', {
            'name': 'parentId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('post', {
            'name': 'post',
            'is_list': False,
            'optional': True,
            'type': 'models.Post',
            'is_relational': True,
            'documentation': None,
        }),
        ('postId', {
            'name': 'postId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_PostLike_relational_fields: Set[str] = {
        'post',
        'profile',
    }
_PostLike_fields: Dict['types.PostLikeKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('post', {
            'name': 'post',
            'is_list': False,
            'optional': True,
            'type': 'models.Post',
            'is_relational': True,
            'documentation': None,
        }),
        ('postId', {
            'name': 'postId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_CommentLike_relational_fields: Set[str] = {
        'comment',
        'profile',
    }
_CommentLike_fields: Dict['types.CommentLikeKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('comment', {
            'name': 'comment',
            'is_list': False,
            'optional': True,
            'type': 'models.Comment',
            'is_relational': True,
            'documentation': None,
        }),
        ('commentId', {
            'name': 'commentId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('profile', {
            'name': 'profile',
            'is_list': False,
            'optional': True,
            'type': 'models.Profile',
            'is_relational': True,
            'documentation': None,
        }),
        ('profileId', {
            'name': 'profileId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Restaurant_relational_fields: Set[str] = {
        'posts',
    }
_Restaurant_fields: Dict['types.RestaurantKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('yelpId', {
            'name': 'yelpId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('latitude', {
            'name': 'latitude',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('longitude', {
            'name': 'longitude',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('posts', {
            'name': 'posts',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Post\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(Profile)
model_rebuild(Follow)
model_rebuild(Post)
model_rebuild(PostTag)
model_rebuild(PostImage)
model_rebuild(Group)
model_rebuild(Member)
model_rebuild(Comment)
model_rebuild(PostLike)
model_rebuild(CommentLike)
model_rebuild(Restaurant)
