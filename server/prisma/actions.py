# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class ProfileActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Profile]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Profile.prisma().query_raw(
            'SELECT * FROM Profile WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Profile
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Profile.prisma().query_first(
            'SELECT * FROM Profile WHERE email = $1',
            'dhheabfhf',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ProfileCreateInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Create a new Profile record.

        Parameters
        ----------
        data
            Profile record data
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created Profile record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Profile record from just the required fields
        profile = Profile.prisma().create(
            data={
                # data to create a Profile record
                'email': 'ggciceaie',
                'username': 'bbehjachib',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.ProfileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Profile records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Profile record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Profile.prisma().create_many(
            data=[
                {
                    # data to create a Profile record
                    'email': 'cadfabfehe',
                    'username': 'dgiiaaijj',
                },
                {
                    # data to create a Profile record
                    'email': 'bfaiacjjfc',
                    'username': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Profile record.

        Parameters
        ----------
        where
            Profile filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The deleted Profile record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = Profile.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Profile record.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = Profile.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Profile record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Profile filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The found Profile record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = Profile.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Profile records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N results
        where
            Profile filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Profile]
            The list of all Profile records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Profile records
        profiles = Profile.prisma().find_many(take=10)

        # find the first 5 Profile records ordered by the username field
        profiles = Profile.prisma().find_many(
            take=5,
            order={
                'username': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Profile record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the imageUrl field
        profile = Profile.prisma().find_first(
            skip=1,
            order={
                'imageUrl': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
        include: Optional[types.ProfileInclude] = None,
        order: Optional[Union[types.ProfileOrderByInput, List[types.ProfileOrderByInput]]] = None,
        distinct: Optional[List[types.ProfileScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Profile record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Profile filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Profile model
        order
            Order the returned Profile records by any field
        distinct
            Filter Profile records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Profile
            The first Profile record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Profile record ordered by the public field
        profile = Profile.prisma().find_first_or_raise(
            skip=1,
            order={
                'public': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.ProfileUpdateInput,
        where: types.ProfileWhereUniqueInput,
        include: Optional[types.ProfileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Profile record.

        Parameters
        ----------
        data
            Profile record data specifying what to update
        where
            Profile filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The updated Profile record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        profile = Profile.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Profile record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.ProfileWhereUniqueInput,
        data: types.ProfileUpsertInput,
        include: Optional[types.ProfileInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Profile filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Profile model

        Returns
        -------
        prisma.models.Profile
            The created or updated Profile record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        profile = Profile.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'email': 'bfaiacjjfc',
                    'username': 'eigcfgbif',
                },
                'update': {
                    'email': 'bfaiacjjfc',
                    'username': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.ProfileUpdateManyMutationInput,
        where: types.ProfileWhereInput,
    ) -> int:
        """Update multiple Profile records

        Parameters
        ----------
        data
            Profile data to update the selected Profile records to
        where
            Filter to select the Profile records to update

        Returns
        -------
        int
            The total number of Profile records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Profile records
        total = Profile.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = Profile.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ProfileCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> types.ProfileCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.ProfileCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProfileWhereInput] = None,
        cursor: Optional[types.ProfileWhereUniqueInput] = None,
    ) -> Union[int, types.ProfileCountAggregateOutput]:
        """Count the number of Profile records present in the database

        Parameters
        ----------
        select
            Select the Profile fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Profile filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProfileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Profile.prisma().count()

        # results: prisma.types.ProfileCountAggregateOutput
        results = Profile.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProfileCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.ProfileWhereInput] = None
    ) -> int:
        """Delete multiple Profile records.

        Parameters
        ----------
        where
            Optional Profile filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Profile records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Profile records
        total = Profile.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.ProfileScalarFieldKeysT'],
        *,
        where: Optional['types.ProfileWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProfileAvgAggregateInput'] = None,
        sum: Optional['types.ProfileSumAggregateInput'] = None,
        min: Optional['types.ProfileMinAggregateInput'] = None,
        max: Optional['types.ProfileMaxAggregateInput'] = None,
        having: Optional['types.ProfileScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProfileCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProfileScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.ProfileScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.ProfileGroupByOutput']:
        """Group Profile records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Profile fields to group records by
        where
            Profile filter to select records
        take
            Limit the maximum number of Profile records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProfileGroupByOutput]
            A list of dictionaries representing the Profile record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Profile records by email values
        # and count how many records are in each group
        results = Profile.prisma().group_by(
            ['email'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class FollowActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Follow]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Follow.prisma().query_raw(
            'SELECT * FROM Follow WHERE id = $1',
            'hjaecfifb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Follow
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Follow.prisma().query_first(
            'SELECT * FROM Follow WHERE followingId = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.FollowCreateInput,
        include: Optional[types.FollowInclude] = None
    ) -> _PrismaModelT:
        """Create a new Follow record.

        Parameters
        ----------
        data
            Follow record data
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The created Follow record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Follow record from just the required fields
        follow = Follow.prisma().create(
            data={
                # data to create a Follow record
                'followingId': 'bbejhfidcb',
                'followedId': 'bgeecijdgg',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.FollowCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Follow records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Follow record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Follow.prisma().create_many(
            data=[
                {
                    # data to create a Follow record
                    'followingId': 'bdiicjafbj',
                    'followedId': 'bgehebiafc',
                },
                {
                    # data to create a Follow record
                    'followingId': 'bghffegacj',
                    'followedId': 'bhghchehcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.FollowWhereUniqueInput,
        include: Optional[types.FollowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Follow record.

        Parameters
        ----------
        where
            Follow filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The deleted Follow record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        follow = Follow.prisma().delete(
            where={
                'id': 'dcgchcbbf',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.FollowWhereUniqueInput,
        include: Optional[types.FollowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Follow record.

        Parameters
        ----------
        where
            Follow filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The found Follow record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        follow = Follow.prisma().find_unique(
            where={
                'id': 'bdedcabahc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.FollowWhereUniqueInput,
        include: Optional[types.FollowInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Follow record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Follow filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The found Follow record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        follow = Follow.prisma().find_unique_or_raise(
            where={
                'id': 'ghfhiafcb',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
        include: Optional[types.FollowInclude] = None,
        order: Optional[Union[types.FollowOrderByInput, List[types.FollowOrderByInput]]] = None,
        distinct: Optional[List[types.FollowScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Follow records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Follow records returned
        skip
            Ignore the first N results
        where
            Follow filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Follow model
        order
            Order the returned Follow records by any field
        distinct
            Filter Follow records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Follow]
            The list of all Follow records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Follow records
        follows = Follow.prisma().find_many(take=10)

        # find the first 5 Follow records ordered by the followedId field
        follows = Follow.prisma().find_many(
            take=5,
            order={
                'followedId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
        include: Optional[types.FollowInclude] = None,
        order: Optional[Union[types.FollowOrderByInput, List[types.FollowOrderByInput]]] = None,
        distinct: Optional[List[types.FollowScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Follow record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Follow filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Follow model
        order
            Order the returned Follow records by any field
        distinct
            Filter Follow records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Follow
            The first Follow record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Follow record ordered by the createdAt field
        follow = Follow.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
        include: Optional[types.FollowInclude] = None,
        order: Optional[Union[types.FollowOrderByInput, List[types.FollowOrderByInput]]] = None,
        distinct: Optional[List[types.FollowScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Follow record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Follow filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Follow model
        order
            Order the returned Follow records by any field
        distinct
            Filter Follow records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Follow
            The first Follow record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Follow record ordered by the updatedAt field
        follow = Follow.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.FollowUpdateInput,
        where: types.FollowWhereUniqueInput,
        include: Optional[types.FollowInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Follow record.

        Parameters
        ----------
        data
            Follow record data specifying what to update
        where
            Follow filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The updated Follow record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        follow = Follow.prisma().update(
            where={
                'id': 'heejgedji',
            },
            data={
                # data to update the Follow record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.FollowWhereUniqueInput,
        data: types.FollowUpsertInput,
        include: Optional[types.FollowInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Follow filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Follow model

        Returns
        -------
        prisma.models.Follow
            The created or updated Follow record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        follow = Follow.prisma().upsert(
            where={
                'id': 'bjgjgibgbf',
            },
            data={
                'create': {
                    'id': 'bjgjgibgbf',
                    'followingId': 'bghffegacj',
                    'followedId': 'bhghchehcc',
                },
                'update': {
                    'followingId': 'bghffegacj',
                    'followedId': 'bhghchehcc',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.FollowUpdateManyMutationInput,
        where: types.FollowWhereInput,
    ) -> int:
        """Update multiple Follow records

        Parameters
        ----------
        data
            Follow data to update the selected Follow records to
        where
            Filter to select the Follow records to update

        Returns
        -------
        int
            The total number of Follow records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Follow records
        total = Follow.prisma().update_many(
            data={
                'id': 'bbbgbhfjge'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Follow records present in the database

        Parameters
        ----------
        select
            Select the Follow fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Follow filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FollowCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Follow.prisma().count()

        # results: prisma.types.FollowCountAggregateOutput
        results = Follow.prisma().count(
            select={
                '_all': True,
                'followingId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.FollowCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
    ) -> types.FollowCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.FollowCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FollowWhereInput] = None,
        cursor: Optional[types.FollowWhereUniqueInput] = None,
    ) -> Union[int, types.FollowCountAggregateOutput]:
        """Count the number of Follow records present in the database

        Parameters
        ----------
        select
            Select the Follow fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Follow filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FollowCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Follow.prisma().count()

        # results: prisma.types.FollowCountAggregateOutput
        results = Follow.prisma().count(
            select={
                '_all': True,
                'followedId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.FollowCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.FollowWhereInput] = None
    ) -> int:
        """Delete multiple Follow records.

        Parameters
        ----------
        where
            Optional Follow filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Follow records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Follow records
        total = Follow.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.FollowScalarFieldKeysT'],
        *,
        where: Optional['types.FollowWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.FollowAvgAggregateInput'] = None,
        sum: Optional['types.FollowSumAggregateInput'] = None,
        min: Optional['types.FollowMinAggregateInput'] = None,
        max: Optional['types.FollowMaxAggregateInput'] = None,
        having: Optional['types.FollowScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.FollowCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.FollowScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.FollowScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.FollowGroupByOutput']:
        """Group Follow records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Follow fields to group records by
        where
            Follow filter to select records
        take
            Limit the maximum number of Follow records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.FollowGroupByOutput]
            A list of dictionaries representing the Follow record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Follow records by createdAt values
        # and count how many records are in each group
        results = Follow.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Post]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Post.prisma().query_raw(
            'SELECT * FROM Post WHERE id = $1',
            'igbehcbab',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Post
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Post.prisma().query_first(
            'SELECT * FROM Post WHERE individual = $1',
            True,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> _PrismaModelT:
        """Create a new Post record.

        Parameters
        ----------
        data
            Post record data
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created Post record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Post record from just the required fields
        post = Post.prisma().create(
            data={
                # data to create a Post record
                'individual': False,
                'meal': enums.MealType.BREAKFAST,
                'restaurantId': 'caaaedabfc',
                'review': 'bigibebcib',
                'rating': 1860847622,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Post records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Post record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Post.prisma().create_many(
            data=[
                {
                    # data to create a Post record
                    'individual': False,
                    'meal': enums.MealType.BREAKFAST,
                    'restaurantId': 'bgcigfahea',
                    'review': 'bcejgaggif',
                    'rating': 835903122,
                },
                {
                    # data to create a Post record
                    'individual': False,
                    'meal': enums.MealType.BREAKFAST,
                    'restaurantId': 'ecjjjfbae',
                    'review': 'bhhfibbigf',
                    'rating': 893145566,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Post record.

        Parameters
        ----------
        where
            Post filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The deleted Post record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().delete(
            where={
                'id': 'jjfeafhfj',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Post record.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().find_unique(
            where={
                'id': 'cbachdgfce',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Post record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().find_unique_or_raise(
            where={
                'id': 'chbfcacbd',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Post records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N results
        where
            Post filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Post]
            The list of all Post records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Post records
        posts = Post.prisma().find_many(take=10)

        # find the first 5 Post records ordered by the meal field
        posts = Post.prisma().find_many(
            take=5,
            order={
                'meal': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Post record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the restaurantId field
        post = Post.prisma().find_first(
            skip=1,
            order={
                'restaurantId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Post record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the groupId field
        post = Post.prisma().find_first_or_raise(
            skip=1,
            order={
                'groupId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Post record.

        Parameters
        ----------
        data
            Post record data specifying what to update
        where
            Post filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The updated Post record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        post = Post.prisma().update(
            where={
                'id': 'efggddide',
            },
            data={
                # data to update the Post record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Post filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created or updated Post record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().upsert(
            where={
                'id': 'caficfigfb',
            },
            data={
                'create': {
                    'id': 'caficfigfb',
                    'individual': False,
                    'meal': enums.MealType.BREAKFAST,
                    'restaurantId': 'ecjjjfbae',
                    'review': 'bhhfibbigf',
                    'rating': 893145566,
                },
                'update': {
                    'individual': False,
                    'meal': enums.MealType.BREAKFAST,
                    'restaurantId': 'ecjjjfbae',
                    'review': 'bhhfibbigf',
                    'rating': 893145566,
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> int:
        """Update multiple Post records

        Parameters
        ----------
        data
            Post data to update the selected Post records to
        where
            Filter to select the Post records to update

        Returns
        -------
        int
            The total number of Post records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Post records
        total = Post.prisma().update_many(
            data={
                'profileId': 'bfidgijfjc'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'review': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> types.PostCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> Union[int, types.PostCountAggregateOutput]:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'rating': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None
    ) -> int:
        """Delete multiple Post records.

        Parameters
        ----------
        where
            Optional Post filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Post records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Post records
        total = Post.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostScalarFieldKeysT'],
        *,
        where: Optional['types.PostWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostAvgAggregateInput'] = None,
        sum: Optional['types.PostSumAggregateInput'] = None,
        min: Optional['types.PostMinAggregateInput'] = None,
        max: Optional['types.PostMaxAggregateInput'] = None,
        having: Optional['types.PostScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.PostScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.PostGroupByOutput']:
        """Group Post records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Post fields to group records by
        where
            Post filter to select records
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostGroupByOutput]
            A list of dictionaries representing the Post record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Post records by createdAt values
        # and count how many records are in each group
        results = Post.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostTagActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PostTag]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = PostTag.prisma().query_raw(
            'SELECT * FROM PostTag WHERE id = $1',
            'ihieecagf',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PostTag
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = PostTag.prisma().query_first(
            'SELECT * FROM PostTag WHERE postId = $1',
            'bghfciaafe',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostTagCreateInput,
        include: Optional[types.PostTagInclude] = None
    ) -> _PrismaModelT:
        """Create a new PostTag record.

        Parameters
        ----------
        data
            PostTag record data
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The created PostTag record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PostTag record from just the required fields
        posttag = PostTag.prisma().create(
            data={
                # data to create a PostTag record
                'postId': 'bgchfhgceh',
                'profileId': 'cafeiaccbc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostTagCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PostTag records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PostTag record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = PostTag.prisma().create_many(
            data=[
                {
                    # data to create a PostTag record
                    'postId': 'gaddfhfh',
                    'profileId': 'gieegcbeg',
                },
                {
                    # data to create a PostTag record
                    'postId': 'bgcffadich',
                    'profileId': 'fcbichhci',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostTagWhereUniqueInput,
        include: Optional[types.PostTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PostTag record.

        Parameters
        ----------
        where
            PostTag filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The deleted PostTag record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttag = PostTag.prisma().delete(
            where={
                'id': 'bcggadccgf',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.PostTagWhereUniqueInput,
        include: Optional[types.PostTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PostTag record.

        Parameters
        ----------
        where
            PostTag filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The found PostTag record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttag = PostTag.prisma().find_unique(
            where={
                'id': 'jdcfdcgc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.PostTagWhereUniqueInput,
        include: Optional[types.PostTagInclude] = None
    ) -> _PrismaModelT:
        """Find a unique PostTag record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            PostTag filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The found PostTag record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttag = PostTag.prisma().find_unique_or_raise(
            where={
                'id': 'cafdaehjid',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
        include: Optional[types.PostTagInclude] = None,
        order: Optional[Union[types.PostTagOrderByInput, List[types.PostTagOrderByInput]]] = None,
        distinct: Optional[List[types.PostTagScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PostTag records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PostTag records returned
        skip
            Ignore the first N results
        where
            PostTag filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostTag model
        order
            Order the returned PostTag records by any field
        distinct
            Filter PostTag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PostTag]
            The list of all PostTag records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PostTag records
        posttags = PostTag.prisma().find_many(take=10)

        # find the first 5 PostTag records ordered by the profileId field
        posttags = PostTag.prisma().find_many(
            take=5,
            order={
                'profileId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
        include: Optional[types.PostTagInclude] = None,
        order: Optional[Union[types.PostTagOrderByInput, List[types.PostTagOrderByInput]]] = None,
        distinct: Optional[List[types.PostTagScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PostTag record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostTag filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostTag model
        order
            Order the returned PostTag records by any field
        distinct
            Filter PostTag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostTag
            The first PostTag record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostTag record ordered by the createdAt field
        posttag = PostTag.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
        include: Optional[types.PostTagInclude] = None,
        order: Optional[Union[types.PostTagOrderByInput, List[types.PostTagOrderByInput]]] = None,
        distinct: Optional[List[types.PostTagScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single PostTag record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostTag filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostTag model
        order
            Order the returned PostTag records by any field
        distinct
            Filter PostTag records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostTag
            The first PostTag record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostTag record ordered by the updatedAt field
        posttag = PostTag.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.PostTagUpdateInput,
        where: types.PostTagWhereUniqueInput,
        include: Optional[types.PostTagInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PostTag record.

        Parameters
        ----------
        data
            PostTag record data specifying what to update
        where
            PostTag filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The updated PostTag record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        posttag = PostTag.prisma().update(
            where={
                'id': 'gifdddbia',
            },
            data={
                # data to update the PostTag record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.PostTagWhereUniqueInput,
        data: types.PostTagUpsertInput,
        include: Optional[types.PostTagInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PostTag filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PostTag model

        Returns
        -------
        prisma.models.PostTag
            The created or updated PostTag record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttag = PostTag.prisma().upsert(
            where={
                'id': 'bchehecef',
            },
            data={
                'create': {
                    'id': 'bchehecef',
                    'postId': 'bgcffadich',
                    'profileId': 'fcbichhci',
                },
                'update': {
                    'postId': 'bgcffadich',
                    'profileId': 'fcbichhci',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.PostTagUpdateManyMutationInput,
        where: types.PostTagWhereInput,
    ) -> int:
        """Update multiple PostTag records

        Parameters
        ----------
        data
            PostTag data to update the selected PostTag records to
        where
            Filter to select the PostTag records to update

        Returns
        -------
        int
            The total number of PostTag records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PostTag records
        total = PostTag.prisma().update_many(
            data={
                'id': 'jeijcbhfe'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PostTag records present in the database

        Parameters
        ----------
        select
            Select the PostTag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostTag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostTagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostTag.prisma().count()

        # results: prisma.types.PostTagCountAggregateOutput
        results = PostTag.prisma().count(
            select={
                '_all': True,
                'postId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostTagCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
    ) -> types.PostTagCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostTagCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagWhereInput] = None,
        cursor: Optional[types.PostTagWhereUniqueInput] = None,
    ) -> Union[int, types.PostTagCountAggregateOutput]:
        """Count the number of PostTag records present in the database

        Parameters
        ----------
        select
            Select the PostTag fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostTag filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostTagCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostTag.prisma().count()

        # results: prisma.types.PostTagCountAggregateOutput
        results = PostTag.prisma().count(
            select={
                '_all': True,
                'profileId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostTagCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostTagWhereInput] = None
    ) -> int:
        """Delete multiple PostTag records.

        Parameters
        ----------
        where
            Optional PostTag filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PostTag records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PostTag records
        total = PostTag.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostTagScalarFieldKeysT'],
        *,
        where: Optional['types.PostTagWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostTagAvgAggregateInput'] = None,
        sum: Optional['types.PostTagSumAggregateInput'] = None,
        min: Optional['types.PostTagMinAggregateInput'] = None,
        max: Optional['types.PostTagMaxAggregateInput'] = None,
        having: Optional['types.PostTagScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostTagCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostTagScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.PostTagScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.PostTagGroupByOutput']:
        """Group PostTag records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PostTag fields to group records by
        where
            PostTag filter to select records
        take
            Limit the maximum number of PostTag records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostTagGroupByOutput]
            A list of dictionaries representing the PostTag record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PostTag records by createdAt values
        # and count how many records are in each group
        results = PostTag.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostImageActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PostImage]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = PostImage.prisma().query_raw(
            'SELECT * FROM PostImage WHERE id = $1',
            'bjgejjabff',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PostImage
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = PostImage.prisma().query_first(
            'SELECT * FROM PostImage WHERE postId = $1',
            'bcciijbibg',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostImageCreateInput,
        include: Optional[types.PostImageInclude] = None
    ) -> _PrismaModelT:
        """Create a new PostImage record.

        Parameters
        ----------
        data
            PostImage record data
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The created PostImage record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PostImage record from just the required fields
        postimage = PostImage.prisma().create(
            data={
                # data to create a PostImage record
                'postId': 'cffcachfd',
                'imageUrl': 'bccdfhdigc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostImageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PostImage records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PostImage record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = PostImage.prisma().create_many(
            data=[
                {
                    # data to create a PostImage record
                    'postId': 'febcgjbfj',
                    'imageUrl': 'bageiegghg',
                },
                {
                    # data to create a PostImage record
                    'postId': 'faidicegb',
                    'imageUrl': 'bacecgfhbe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostImageWhereUniqueInput,
        include: Optional[types.PostImageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PostImage record.

        Parameters
        ----------
        where
            PostImage filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The deleted PostImage record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postimage = PostImage.prisma().delete(
            where={
                'id': 'ihcahiead',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.PostImageWhereUniqueInput,
        include: Optional[types.PostImageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PostImage record.

        Parameters
        ----------
        where
            PostImage filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The found PostImage record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postimage = PostImage.prisma().find_unique(
            where={
                'id': 'biheheiajg',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.PostImageWhereUniqueInput,
        include: Optional[types.PostImageInclude] = None
    ) -> _PrismaModelT:
        """Find a unique PostImage record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            PostImage filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The found PostImage record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postimage = PostImage.prisma().find_unique_or_raise(
            where={
                'id': 'jbgijghgb',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
        include: Optional[types.PostImageInclude] = None,
        order: Optional[Union[types.PostImageOrderByInput, List[types.PostImageOrderByInput]]] = None,
        distinct: Optional[List[types.PostImageScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PostImage records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PostImage records returned
        skip
            Ignore the first N results
        where
            PostImage filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostImage model
        order
            Order the returned PostImage records by any field
        distinct
            Filter PostImage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PostImage]
            The list of all PostImage records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PostImage records
        postimages = PostImage.prisma().find_many(take=10)

        # find the first 5 PostImage records ordered by the imageUrl field
        postimages = PostImage.prisma().find_many(
            take=5,
            order={
                'imageUrl': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
        include: Optional[types.PostImageInclude] = None,
        order: Optional[Union[types.PostImageOrderByInput, List[types.PostImageOrderByInput]]] = None,
        distinct: Optional[List[types.PostImageScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PostImage record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostImage filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostImage model
        order
            Order the returned PostImage records by any field
        distinct
            Filter PostImage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostImage
            The first PostImage record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostImage record ordered by the createdAt field
        postimage = PostImage.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
        include: Optional[types.PostImageInclude] = None,
        order: Optional[Union[types.PostImageOrderByInput, List[types.PostImageOrderByInput]]] = None,
        distinct: Optional[List[types.PostImageScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single PostImage record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostImage filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostImage model
        order
            Order the returned PostImage records by any field
        distinct
            Filter PostImage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostImage
            The first PostImage record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostImage record ordered by the updatedAt field
        postimage = PostImage.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.PostImageUpdateInput,
        where: types.PostImageWhereUniqueInput,
        include: Optional[types.PostImageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PostImage record.

        Parameters
        ----------
        data
            PostImage record data specifying what to update
        where
            PostImage filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The updated PostImage record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        postimage = PostImage.prisma().update(
            where={
                'id': 'hgjcghfbi',
            },
            data={
                # data to update the PostImage record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.PostImageWhereUniqueInput,
        data: types.PostImageUpsertInput,
        include: Optional[types.PostImageInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PostImage filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PostImage model

        Returns
        -------
        prisma.models.PostImage
            The created or updated PostImage record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postimage = PostImage.prisma().upsert(
            where={
                'id': 'icadbcehj',
            },
            data={
                'create': {
                    'id': 'icadbcehj',
                    'postId': 'faidicegb',
                    'imageUrl': 'bacecgfhbe',
                },
                'update': {
                    'postId': 'faidicegb',
                    'imageUrl': 'bacecgfhbe',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.PostImageUpdateManyMutationInput,
        where: types.PostImageWhereInput,
    ) -> int:
        """Update multiple PostImage records

        Parameters
        ----------
        data
            PostImage data to update the selected PostImage records to
        where
            Filter to select the PostImage records to update

        Returns
        -------
        int
            The total number of PostImage records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PostImage records
        total = PostImage.prisma().update_many(
            data={
                'id': 'jchciaee'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PostImage records present in the database

        Parameters
        ----------
        select
            Select the PostImage fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostImage filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostImageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostImage.prisma().count()

        # results: prisma.types.PostImageCountAggregateOutput
        results = PostImage.prisma().count(
            select={
                '_all': True,
                'postId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostImageCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
    ) -> types.PostImageCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostImageCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostImageWhereInput] = None,
        cursor: Optional[types.PostImageWhereUniqueInput] = None,
    ) -> Union[int, types.PostImageCountAggregateOutput]:
        """Count the number of PostImage records present in the database

        Parameters
        ----------
        select
            Select the PostImage fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostImage filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostImageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostImage.prisma().count()

        # results: prisma.types.PostImageCountAggregateOutput
        results = PostImage.prisma().count(
            select={
                '_all': True,
                'imageUrl': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostImageCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostImageWhereInput] = None
    ) -> int:
        """Delete multiple PostImage records.

        Parameters
        ----------
        where
            Optional PostImage filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PostImage records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PostImage records
        total = PostImage.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostImageScalarFieldKeysT'],
        *,
        where: Optional['types.PostImageWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostImageAvgAggregateInput'] = None,
        sum: Optional['types.PostImageSumAggregateInput'] = None,
        min: Optional['types.PostImageMinAggregateInput'] = None,
        max: Optional['types.PostImageMaxAggregateInput'] = None,
        having: Optional['types.PostImageScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostImageCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostImageScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.PostImageScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.PostImageGroupByOutput']:
        """Group PostImage records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PostImage fields to group records by
        where
            PostImage filter to select records
        take
            Limit the maximum number of PostImage records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostImageGroupByOutput]
            A list of dictionaries representing the PostImage record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PostImage records by createdAt values
        # and count how many records are in each group
        results = PostImage.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GroupActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Group]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Group.prisma().query_raw(
            'SELECT * FROM Group WHERE id = $1',
            'deeificjd',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Group
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Group.prisma().query_first(
            'SELECT * FROM Group WHERE name = $1',
            'bbcbhebbda',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.GroupCreateInput,
        include: Optional[types.GroupInclude] = None
    ) -> _PrismaModelT:
        """Create a new Group record.

        Parameters
        ----------
        data
            Group record data
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The created Group record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Group record from just the required fields
        group = Group.prisma().create(
            data={
                # data to create a Group record
                'name': 'bejfijgcfb',
                'description': 'caifcbgii',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.GroupCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Group records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Group record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Group.prisma().create_many(
            data=[
                {
                    # data to create a Group record
                    'name': 'igaibbfgj',
                    'description': 'bggajdcbbi',
                },
                {
                    # data to create a Group record
                    'name': 'fcfhgbjed',
                    'description': 'hdgcajhjg',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Group record.

        Parameters
        ----------
        where
            Group filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The deleted Group record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = Group.prisma().delete(
            where={
                'id': 'ejdjahicb',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Group record.

        Parameters
        ----------
        where
            Group filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The found Group record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = Group.prisma().find_unique(
            where={
                'id': 'gdjgigfgc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Group record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Group filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The found Group record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = Group.prisma().find_unique_or_raise(
            where={
                'id': 'gfeaahdeh',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Group records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Group records returned
        skip
            Ignore the first N results
        where
            Group filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Group]
            The list of all Group records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Group records
        groups = Group.prisma().find_many(take=10)

        # find the first 5 Group records ordered by the description field
        groups = Group.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Group record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Group filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Group
            The first Group record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Group record ordered by the createdAt field
        group = Group.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Group record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Group filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Group
            The first Group record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Group record ordered by the updatedAt field
        group = Group.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.GroupUpdateInput,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Group record.

        Parameters
        ----------
        data
            Group record data specifying what to update
        where
            Group filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The updated Group record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        group = Group.prisma().update(
            where={
                'id': 'bjafcgbffc',
            },
            data={
                # data to update the Group record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.GroupWhereUniqueInput,
        data: types.GroupUpsertInput,
        include: Optional[types.GroupInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Group filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The created or updated Group record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = Group.prisma().upsert(
            where={
                'id': 'hihegjif',
            },
            data={
                'create': {
                    'id': 'hihegjif',
                    'name': 'fcfhgbjed',
                    'description': 'hdgcajhjg',
                },
                'update': {
                    'name': 'fcfhgbjed',
                    'description': 'hdgcajhjg',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.GroupUpdateManyMutationInput,
        where: types.GroupWhereInput,
    ) -> int:
        """Update multiple Group records

        Parameters
        ----------
        data
            Group data to update the selected Group records to
        where
            Filter to select the Group records to update

        Returns
        -------
        int
            The total number of Group records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Group records
        total = Group.prisma().update_many(
            data={
                'id': 'bdjidcidac'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Group records present in the database

        Parameters
        ----------
        select
            Select the Group fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Group filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Group.prisma().count()

        # results: prisma.types.GroupCountAggregateOutput
        results = Group.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.GroupCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> types.GroupCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.GroupCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> Union[int, types.GroupCountAggregateOutput]:
        """Count the number of Group records present in the database

        Parameters
        ----------
        select
            Select the Group fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Group filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Group.prisma().count()

        # results: prisma.types.GroupCountAggregateOutput
        results = Group.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GroupCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.GroupWhereInput] = None
    ) -> int:
        """Delete multiple Group records.

        Parameters
        ----------
        where
            Optional Group filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Group records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Group records
        total = Group.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.GroupScalarFieldKeysT'],
        *,
        where: Optional['types.GroupWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GroupAvgAggregateInput'] = None,
        sum: Optional['types.GroupSumAggregateInput'] = None,
        min: Optional['types.GroupMinAggregateInput'] = None,
        max: Optional['types.GroupMaxAggregateInput'] = None,
        having: Optional['types.GroupScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GroupCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GroupScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.GroupScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.GroupGroupByOutput']:
        """Group Group records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Group fields to group records by
        where
            Group filter to select records
        take
            Limit the maximum number of Group records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GroupGroupByOutput]
            A list of dictionaries representing the Group record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Group records by createdAt values
        # and count how many records are in each group
        results = Group.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MemberActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Member]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Member.prisma().query_raw(
            'SELECT * FROM Member WHERE id = $1',
            'ifgaaagff',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Member
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Member.prisma().query_first(
            'SELECT * FROM Member WHERE profileId = $1',
            'befcddgjce',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.MemberCreateInput,
        include: Optional[types.MemberInclude] = None
    ) -> _PrismaModelT:
        """Create a new Member record.

        Parameters
        ----------
        data
            Member record data
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The created Member record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Member record from just the required fields
        member = Member.prisma().create(
            data={
                # data to create a Member record
                'profileId': 'bfhdbjjgfd',
                'groupId': 'cabdjadaji',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.MemberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Member records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Member record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Member.prisma().create_many(
            data=[
                {
                    # data to create a Member record
                    'profileId': 'faajgfadf',
                    'groupId': 'biaagcedjc',
                },
                {
                    # data to create a Member record
                    'profileId': 'cahhaghecf',
                    'groupId': 'bghcbbcidi',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.MemberWhereUniqueInput,
        include: Optional[types.MemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Member record.

        Parameters
        ----------
        where
            Member filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The deleted Member record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        member = Member.prisma().delete(
            where={
                'id': 'jcgghhgdj',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.MemberWhereUniqueInput,
        include: Optional[types.MemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Member record.

        Parameters
        ----------
        where
            Member filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The found Member record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        member = Member.prisma().find_unique(
            where={
                'id': 'beehgcebbg',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.MemberWhereUniqueInput,
        include: Optional[types.MemberInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Member record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Member filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The found Member record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        member = Member.prisma().find_unique_or_raise(
            where={
                'id': 'bhdiaidiaf',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
        include: Optional[types.MemberInclude] = None,
        order: Optional[Union[types.MemberOrderByInput, List[types.MemberOrderByInput]]] = None,
        distinct: Optional[List[types.MemberScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Member records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Member records returned
        skip
            Ignore the first N results
        where
            Member filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Member model
        order
            Order the returned Member records by any field
        distinct
            Filter Member records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Member]
            The list of all Member records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Member records
        members = Member.prisma().find_many(take=10)

        # find the first 5 Member records ordered by the groupId field
        members = Member.prisma().find_many(
            take=5,
            order={
                'groupId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
        include: Optional[types.MemberInclude] = None,
        order: Optional[Union[types.MemberOrderByInput, List[types.MemberOrderByInput]]] = None,
        distinct: Optional[List[types.MemberScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Member record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Member filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Member model
        order
            Order the returned Member records by any field
        distinct
            Filter Member records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Member
            The first Member record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Member record ordered by the createdAt field
        member = Member.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
        include: Optional[types.MemberInclude] = None,
        order: Optional[Union[types.MemberOrderByInput, List[types.MemberOrderByInput]]] = None,
        distinct: Optional[List[types.MemberScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Member record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Member filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Member model
        order
            Order the returned Member records by any field
        distinct
            Filter Member records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Member
            The first Member record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Member record ordered by the updatedAt field
        member = Member.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.MemberUpdateInput,
        where: types.MemberWhereUniqueInput,
        include: Optional[types.MemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Member record.

        Parameters
        ----------
        data
            Member record data specifying what to update
        where
            Member filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The updated Member record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        member = Member.prisma().update(
            where={
                'id': 'deajegcfi',
            },
            data={
                # data to update the Member record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.MemberWhereUniqueInput,
        data: types.MemberUpsertInput,
        include: Optional[types.MemberInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Member filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Member model

        Returns
        -------
        prisma.models.Member
            The created or updated Member record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        member = Member.prisma().upsert(
            where={
                'id': 'gabahhhjf',
            },
            data={
                'create': {
                    'id': 'gabahhhjf',
                    'profileId': 'cahhaghecf',
                    'groupId': 'bghcbbcidi',
                },
                'update': {
                    'profileId': 'cahhaghecf',
                    'groupId': 'bghcbbcidi',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.MemberUpdateManyMutationInput,
        where: types.MemberWhereInput,
    ) -> int:
        """Update multiple Member records

        Parameters
        ----------
        data
            Member data to update the selected Member records to
        where
            Filter to select the Member records to update

        Returns
        -------
        int
            The total number of Member records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Member records
        total = Member.prisma().update_many(
            data={
                'id': 'cjagadcjg'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Member records present in the database

        Parameters
        ----------
        select
            Select the Member fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Member filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MemberCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Member.prisma().count()

        # results: prisma.types.MemberCountAggregateOutput
        results = Member.prisma().count(
            select={
                '_all': True,
                'profileId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.MemberCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
    ) -> types.MemberCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.MemberCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MemberWhereInput] = None,
        cursor: Optional[types.MemberWhereUniqueInput] = None,
    ) -> Union[int, types.MemberCountAggregateOutput]:
        """Count the number of Member records present in the database

        Parameters
        ----------
        select
            Select the Member fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Member filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MemberCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Member.prisma().count()

        # results: prisma.types.MemberCountAggregateOutput
        results = Member.prisma().count(
            select={
                '_all': True,
                'groupId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MemberCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.MemberWhereInput] = None
    ) -> int:
        """Delete multiple Member records.

        Parameters
        ----------
        where
            Optional Member filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Member records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Member records
        total = Member.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.MemberScalarFieldKeysT'],
        *,
        where: Optional['types.MemberWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MemberAvgAggregateInput'] = None,
        sum: Optional['types.MemberSumAggregateInput'] = None,
        min: Optional['types.MemberMinAggregateInput'] = None,
        max: Optional['types.MemberMaxAggregateInput'] = None,
        having: Optional['types.MemberScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MemberCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MemberScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.MemberScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.MemberGroupByOutput']:
        """Group Member records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Member fields to group records by
        where
            Member filter to select records
        take
            Limit the maximum number of Member records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MemberGroupByOutput]
            A list of dictionaries representing the Member record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Member records by createdAt values
        # and count how many records are in each group
        results = Member.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CommentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Comment]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Comment.prisma().query_raw(
            'SELECT * FROM Comment WHERE id = $1',
            'bifficggej',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Comment
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Comment.prisma().query_first(
            'SELECT * FROM Comment WHERE message = $1',
            'bgbbaajbic',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.CommentCreateInput,
        include: Optional[types.CommentInclude] = None
    ) -> _PrismaModelT:
        """Create a new Comment record.

        Parameters
        ----------
        data
            Comment record data
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The created Comment record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Comment record from just the required fields
        comment = Comment.prisma().create(
            data={
                # data to create a Comment record
                'message': 'eegghdhjb',
                'postId': 'daafgidjg',
                'profileId': 'gdcgcgagj',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.CommentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Comment records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Comment record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Comment.prisma().create_many(
            data=[
                {
                    # data to create a Comment record
                    'message': 'bhceabbgja',
                    'postId': 'ehabfhegh',
                    'profileId': 'bcajcajjbc',
                },
                {
                    # data to create a Comment record
                    'message': 'bfdgheeegf',
                    'postId': 'ececbijji',
                    'profileId': 'cbcfgdcdhf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.CommentWhereUniqueInput,
        include: Optional[types.CommentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Comment record.

        Parameters
        ----------
        where
            Comment filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The deleted Comment record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = Comment.prisma().delete(
            where={
                'id': 'fdgjfbhia',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.CommentWhereUniqueInput,
        include: Optional[types.CommentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Comment record.

        Parameters
        ----------
        where
            Comment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The found Comment record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = Comment.prisma().find_unique(
            where={
                'id': 'jcehcdchh',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.CommentWhereUniqueInput,
        include: Optional[types.CommentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Comment record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Comment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The found Comment record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = Comment.prisma().find_unique_or_raise(
            where={
                'id': 'bgcbjdhjcc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
        include: Optional[types.CommentInclude] = None,
        order: Optional[Union[types.CommentOrderByInput, List[types.CommentOrderByInput]]] = None,
        distinct: Optional[List[types.CommentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Comment records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Comment records returned
        skip
            Ignore the first N results
        where
            Comment filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Comment model
        order
            Order the returned Comment records by any field
        distinct
            Filter Comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Comment]
            The list of all Comment records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Comment records
        comments = Comment.prisma().find_many(take=10)

        # find the first 5 Comment records ordered by the parentId field
        comments = Comment.prisma().find_many(
            take=5,
            order={
                'parentId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
        include: Optional[types.CommentInclude] = None,
        order: Optional[Union[types.CommentOrderByInput, List[types.CommentOrderByInput]]] = None,
        distinct: Optional[List[types.CommentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Comment record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Comment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Comment model
        order
            Order the returned Comment records by any field
        distinct
            Filter Comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Comment
            The first Comment record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Comment record ordered by the postId field
        comment = Comment.prisma().find_first(
            skip=1,
            order={
                'postId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
        include: Optional[types.CommentInclude] = None,
        order: Optional[Union[types.CommentOrderByInput, List[types.CommentOrderByInput]]] = None,
        distinct: Optional[List[types.CommentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Comment record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Comment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Comment model
        order
            Order the returned Comment records by any field
        distinct
            Filter Comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Comment
            The first Comment record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Comment record ordered by the profileId field
        comment = Comment.prisma().find_first_or_raise(
            skip=1,
            order={
                'profileId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.CommentUpdateInput,
        where: types.CommentWhereUniqueInput,
        include: Optional[types.CommentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Comment record.

        Parameters
        ----------
        data
            Comment record data specifying what to update
        where
            Comment filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The updated Comment record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        comment = Comment.prisma().update(
            where={
                'id': 'bieiidcabj',
            },
            data={
                # data to update the Comment record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.CommentWhereUniqueInput,
        data: types.CommentUpsertInput,
        include: Optional[types.CommentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Comment filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Comment model

        Returns
        -------
        prisma.models.Comment
            The created or updated Comment record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = Comment.prisma().upsert(
            where={
                'id': 'bjcbfcieaa',
            },
            data={
                'create': {
                    'id': 'bjcbfcieaa',
                    'message': 'bfdgheeegf',
                    'postId': 'ececbijji',
                    'profileId': 'cbcfgdcdhf',
                },
                'update': {
                    'message': 'bfdgheeegf',
                    'postId': 'ececbijji',
                    'profileId': 'cbcfgdcdhf',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.CommentUpdateManyMutationInput,
        where: types.CommentWhereInput,
    ) -> int:
        """Update multiple Comment records

        Parameters
        ----------
        data
            Comment data to update the selected Comment records to
        where
            Filter to select the Comment records to update

        Returns
        -------
        int
            The total number of Comment records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Comment records
        total = Comment.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Comment records present in the database

        Parameters
        ----------
        select
            Select the Comment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Comment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CommentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Comment.prisma().count()

        # results: prisma.types.CommentCountAggregateOutput
        results = Comment.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.CommentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
    ) -> types.CommentCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.CommentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentWhereInput] = None,
        cursor: Optional[types.CommentWhereUniqueInput] = None,
    ) -> Union[int, types.CommentCountAggregateOutput]:
        """Count the number of Comment records present in the database

        Parameters
        ----------
        select
            Select the Comment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Comment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CommentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Comment.prisma().count()

        # results: prisma.types.CommentCountAggregateOutput
        results = Comment.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CommentCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.CommentWhereInput] = None
    ) -> int:
        """Delete multiple Comment records.

        Parameters
        ----------
        where
            Optional Comment filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Comment records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Comment records
        total = Comment.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.CommentScalarFieldKeysT'],
        *,
        where: Optional['types.CommentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CommentAvgAggregateInput'] = None,
        sum: Optional['types.CommentSumAggregateInput'] = None,
        min: Optional['types.CommentMinAggregateInput'] = None,
        max: Optional['types.CommentMaxAggregateInput'] = None,
        having: Optional['types.CommentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CommentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CommentScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.CommentScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.CommentGroupByOutput']:
        """Group Comment records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Comment fields to group records by
        where
            Comment filter to select records
        take
            Limit the maximum number of Comment records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CommentGroupByOutput]
            A list of dictionaries representing the Comment record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Comment records by message values
        # and count how many records are in each group
        results = Comment.prisma().group_by(
            ['message'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostLikeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PostLike]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = PostLike.prisma().query_raw(
            'SELECT * FROM PostLike WHERE id = $1',
            'cbaaechiej',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PostLike
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = PostLike.prisma().query_first(
            'SELECT * FROM PostLike WHERE postId = $1',
            'iejbeaaeg',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostLikeCreateInput,
        include: Optional[types.PostLikeInclude] = None
    ) -> _PrismaModelT:
        """Create a new PostLike record.

        Parameters
        ----------
        data
            PostLike record data
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The created PostLike record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PostLike record from just the required fields
        postlike = PostLike.prisma().create(
            data={
                # data to create a PostLike record
                'postId': 'jcibfcbhf',
                'profileId': 'chdadcaga',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostLikeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PostLike records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PostLike record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = PostLike.prisma().create_many(
            data=[
                {
                    # data to create a PostLike record
                    'postId': 'jicieifbh',
                    'profileId': 'fbahdheji',
                },
                {
                    # data to create a PostLike record
                    'postId': 'cbbheiicgh',
                    'profileId': 'beabjeejdg',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostLikeWhereUniqueInput,
        include: Optional[types.PostLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PostLike record.

        Parameters
        ----------
        where
            PostLike filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The deleted PostLike record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postlike = PostLike.prisma().delete(
            where={
                'id': 'bcjhgahffd',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.PostLikeWhereUniqueInput,
        include: Optional[types.PostLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PostLike record.

        Parameters
        ----------
        where
            PostLike filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The found PostLike record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postlike = PostLike.prisma().find_unique(
            where={
                'id': 'fbjeiiffa',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.PostLikeWhereUniqueInput,
        include: Optional[types.PostLikeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique PostLike record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            PostLike filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The found PostLike record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postlike = PostLike.prisma().find_unique_or_raise(
            where={
                'id': 'jhgidcgbf',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
        include: Optional[types.PostLikeInclude] = None,
        order: Optional[Union[types.PostLikeOrderByInput, List[types.PostLikeOrderByInput]]] = None,
        distinct: Optional[List[types.PostLikeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PostLike records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PostLike records returned
        skip
            Ignore the first N results
        where
            PostLike filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostLike model
        order
            Order the returned PostLike records by any field
        distinct
            Filter PostLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PostLike]
            The list of all PostLike records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PostLike records
        postlikes = PostLike.prisma().find_many(take=10)

        # find the first 5 PostLike records ordered by the profileId field
        postlikes = PostLike.prisma().find_many(
            take=5,
            order={
                'profileId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
        include: Optional[types.PostLikeInclude] = None,
        order: Optional[Union[types.PostLikeOrderByInput, List[types.PostLikeOrderByInput]]] = None,
        distinct: Optional[List[types.PostLikeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PostLike record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostLike filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostLike model
        order
            Order the returned PostLike records by any field
        distinct
            Filter PostLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostLike
            The first PostLike record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostLike record ordered by the createdAt field
        postlike = PostLike.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
        include: Optional[types.PostLikeInclude] = None,
        order: Optional[Union[types.PostLikeOrderByInput, List[types.PostLikeOrderByInput]]] = None,
        distinct: Optional[List[types.PostLikeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single PostLike record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostLike filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostLike model
        order
            Order the returned PostLike records by any field
        distinct
            Filter PostLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostLike
            The first PostLike record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostLike record ordered by the updatedAt field
        postlike = PostLike.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.PostLikeUpdateInput,
        where: types.PostLikeWhereUniqueInput,
        include: Optional[types.PostLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PostLike record.

        Parameters
        ----------
        data
            PostLike record data specifying what to update
        where
            PostLike filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The updated PostLike record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        postlike = PostLike.prisma().update(
            where={
                'id': 'bgjgecfejc',
            },
            data={
                # data to update the PostLike record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.PostLikeWhereUniqueInput,
        data: types.PostLikeUpsertInput,
        include: Optional[types.PostLikeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PostLike filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PostLike model

        Returns
        -------
        prisma.models.PostLike
            The created or updated PostLike record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postlike = PostLike.prisma().upsert(
            where={
                'id': 'bgjcgchib',
            },
            data={
                'create': {
                    'id': 'bgjcgchib',
                    'postId': 'cbbheiicgh',
                    'profileId': 'beabjeejdg',
                },
                'update': {
                    'postId': 'cbbheiicgh',
                    'profileId': 'beabjeejdg',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.PostLikeUpdateManyMutationInput,
        where: types.PostLikeWhereInput,
    ) -> int:
        """Update multiple PostLike records

        Parameters
        ----------
        data
            PostLike data to update the selected PostLike records to
        where
            Filter to select the PostLike records to update

        Returns
        -------
        int
            The total number of PostLike records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PostLike records
        total = PostLike.prisma().update_many(
            data={
                'id': 'bacdaibgfa'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PostLike records present in the database

        Parameters
        ----------
        select
            Select the PostLike fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostLike filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostLikeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostLike.prisma().count()

        # results: prisma.types.PostLikeCountAggregateOutput
        results = PostLike.prisma().count(
            select={
                '_all': True,
                'postId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostLikeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
    ) -> types.PostLikeCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostLikeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostLikeWhereInput] = None,
        cursor: Optional[types.PostLikeWhereUniqueInput] = None,
    ) -> Union[int, types.PostLikeCountAggregateOutput]:
        """Count the number of PostLike records present in the database

        Parameters
        ----------
        select
            Select the PostLike fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostLike filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostLikeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostLike.prisma().count()

        # results: prisma.types.PostLikeCountAggregateOutput
        results = PostLike.prisma().count(
            select={
                '_all': True,
                'profileId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostLikeCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostLikeWhereInput] = None
    ) -> int:
        """Delete multiple PostLike records.

        Parameters
        ----------
        where
            Optional PostLike filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PostLike records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PostLike records
        total = PostLike.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostLikeScalarFieldKeysT'],
        *,
        where: Optional['types.PostLikeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostLikeAvgAggregateInput'] = None,
        sum: Optional['types.PostLikeSumAggregateInput'] = None,
        min: Optional['types.PostLikeMinAggregateInput'] = None,
        max: Optional['types.PostLikeMaxAggregateInput'] = None,
        having: Optional['types.PostLikeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostLikeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostLikeScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.PostLikeScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.PostLikeGroupByOutput']:
        """Group PostLike records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PostLike fields to group records by
        where
            PostLike filter to select records
        take
            Limit the maximum number of PostLike records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostLikeGroupByOutput]
            A list of dictionaries representing the PostLike record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PostLike records by createdAt values
        # and count how many records are in each group
        results = PostLike.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CommentLikeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.CommentLike]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = CommentLike.prisma().query_raw(
            'SELECT * FROM CommentLike WHERE id = $1',
            'dchgibach',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.CommentLike
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = CommentLike.prisma().query_first(
            'SELECT * FROM CommentLike WHERE commentId = $1',
            'fchheijjc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.CommentLikeCreateInput,
        include: Optional[types.CommentLikeInclude] = None
    ) -> _PrismaModelT:
        """Create a new CommentLike record.

        Parameters
        ----------
        data
            CommentLike record data
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The created CommentLike record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a CommentLike record from just the required fields
        commentlike = CommentLike.prisma().create(
            data={
                # data to create a CommentLike record
                'commentId': 'cacjdfhejh',
                'profileId': 'bdbifjhbbi',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.CommentLikeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple CommentLike records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of CommentLike record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = CommentLike.prisma().create_many(
            data=[
                {
                    # data to create a CommentLike record
                    'commentId': 'cbccbbcdfb',
                    'profileId': 'bacejedaca',
                },
                {
                    # data to create a CommentLike record
                    'commentId': 'bhbhdahfaj',
                    'profileId': 'bfjibceaec',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.CommentLikeWhereUniqueInput,
        include: Optional[types.CommentLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single CommentLike record.

        Parameters
        ----------
        where
            CommentLike filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The deleted CommentLike record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        commentlike = CommentLike.prisma().delete(
            where={
                'id': 'ibhgcdbgd',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.CommentLikeWhereUniqueInput,
        include: Optional[types.CommentLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique CommentLike record.

        Parameters
        ----------
        where
            CommentLike filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The found CommentLike record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        commentlike = CommentLike.prisma().find_unique(
            where={
                'id': 'badaffhddg',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.CommentLikeWhereUniqueInput,
        include: Optional[types.CommentLikeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique CommentLike record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            CommentLike filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The found CommentLike record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        commentlike = CommentLike.prisma().find_unique_or_raise(
            where={
                'id': 'bbdbfcfihd',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
        include: Optional[types.CommentLikeInclude] = None,
        order: Optional[Union[types.CommentLikeOrderByInput, List[types.CommentLikeOrderByInput]]] = None,
        distinct: Optional[List[types.CommentLikeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple CommentLike records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of CommentLike records returned
        skip
            Ignore the first N results
        where
            CommentLike filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CommentLike model
        order
            Order the returned CommentLike records by any field
        distinct
            Filter CommentLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.CommentLike]
            The list of all CommentLike records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 CommentLike records
        commentlikes = CommentLike.prisma().find_many(take=10)

        # find the first 5 CommentLike records ordered by the profileId field
        commentlikes = CommentLike.prisma().find_many(
            take=5,
            order={
                'profileId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
        include: Optional[types.CommentLikeInclude] = None,
        order: Optional[Union[types.CommentLikeOrderByInput, List[types.CommentLikeOrderByInput]]] = None,
        distinct: Optional[List[types.CommentLikeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single CommentLike record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CommentLike filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CommentLike model
        order
            Order the returned CommentLike records by any field
        distinct
            Filter CommentLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CommentLike
            The first CommentLike record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CommentLike record ordered by the createdAt field
        commentlike = CommentLike.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
        include: Optional[types.CommentLikeInclude] = None,
        order: Optional[Union[types.CommentLikeOrderByInput, List[types.CommentLikeOrderByInput]]] = None,
        distinct: Optional[List[types.CommentLikeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single CommentLike record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CommentLike filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CommentLike model
        order
            Order the returned CommentLike records by any field
        distinct
            Filter CommentLike records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CommentLike
            The first CommentLike record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CommentLike record ordered by the updatedAt field
        commentlike = CommentLike.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.CommentLikeUpdateInput,
        where: types.CommentLikeWhereUniqueInput,
        include: Optional[types.CommentLikeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single CommentLike record.

        Parameters
        ----------
        data
            CommentLike record data specifying what to update
        where
            CommentLike filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The updated CommentLike record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        commentlike = CommentLike.prisma().update(
            where={
                'id': 'cbagggbji',
            },
            data={
                # data to update the CommentLike record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.CommentLikeWhereUniqueInput,
        data: types.CommentLikeUpsertInput,
        include: Optional[types.CommentLikeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            CommentLike filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned CommentLike model

        Returns
        -------
        prisma.models.CommentLike
            The created or updated CommentLike record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        commentlike = CommentLike.prisma().upsert(
            where={
                'id': 'bchgafhjed',
            },
            data={
                'create': {
                    'id': 'bchgafhjed',
                    'commentId': 'bhbhdahfaj',
                    'profileId': 'bfjibceaec',
                },
                'update': {
                    'commentId': 'bhbhdahfaj',
                    'profileId': 'bfjibceaec',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.CommentLikeUpdateManyMutationInput,
        where: types.CommentLikeWhereInput,
    ) -> int:
        """Update multiple CommentLike records

        Parameters
        ----------
        data
            CommentLike data to update the selected CommentLike records to
        where
            Filter to select the CommentLike records to update

        Returns
        -------
        int
            The total number of CommentLike records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all CommentLike records
        total = CommentLike.prisma().update_many(
            data={
                'id': 'heffgjdei'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of CommentLike records present in the database

        Parameters
        ----------
        select
            Select the CommentLike fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CommentLike filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CommentLikeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = CommentLike.prisma().count()

        # results: prisma.types.CommentLikeCountAggregateOutput
        results = CommentLike.prisma().count(
            select={
                '_all': True,
                'commentId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.CommentLikeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
    ) -> types.CommentLikeCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.CommentLikeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CommentLikeWhereInput] = None,
        cursor: Optional[types.CommentLikeWhereUniqueInput] = None,
    ) -> Union[int, types.CommentLikeCountAggregateOutput]:
        """Count the number of CommentLike records present in the database

        Parameters
        ----------
        select
            Select the CommentLike fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CommentLike filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CommentLikeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = CommentLike.prisma().count()

        # results: prisma.types.CommentLikeCountAggregateOutput
        results = CommentLike.prisma().count(
            select={
                '_all': True,
                'profileId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CommentLikeCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.CommentLikeWhereInput] = None
    ) -> int:
        """Delete multiple CommentLike records.

        Parameters
        ----------
        where
            Optional CommentLike filter to find the records to be deleted

        Returns
        -------
        int
            The total number of CommentLike records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all CommentLike records
        total = CommentLike.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.CommentLikeScalarFieldKeysT'],
        *,
        where: Optional['types.CommentLikeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CommentLikeAvgAggregateInput'] = None,
        sum: Optional['types.CommentLikeSumAggregateInput'] = None,
        min: Optional['types.CommentLikeMinAggregateInput'] = None,
        max: Optional['types.CommentLikeMaxAggregateInput'] = None,
        having: Optional['types.CommentLikeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CommentLikeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CommentLikeScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.CommentLikeScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.CommentLikeGroupByOutput']:
        """Group CommentLike records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar CommentLike fields to group records by
        where
            CommentLike filter to select records
        take
            Limit the maximum number of CommentLike records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CommentLikeGroupByOutput]
            A list of dictionaries representing the CommentLike record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group CommentLike records by createdAt values
        # and count how many records are in each group
        results = CommentLike.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RestaurantActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Restaurant]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Restaurant.prisma().query_raw(
            'SELECT * FROM Restaurant WHERE id = $1',
            'dahihgbeb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Restaurant
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Restaurant.prisma().query_first(
            'SELECT * FROM Restaurant WHERE name = $1',
            'bgheaejbcc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.RestaurantCreateInput,
        include: Optional[types.RestaurantInclude] = None
    ) -> _PrismaModelT:
        """Create a new Restaurant record.

        Parameters
        ----------
        data
            Restaurant record data
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The created Restaurant record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Restaurant record from just the required fields
        restaurant = Restaurant.prisma().create(
            data={
                # data to create a Restaurant record
                'name': 'bfcgifeged',
                'yelpId': 'jfiahhbae',
                'latitude': 'bfbdafajcb',
                'longitude': 'caeghehde',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.RestaurantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Restaurant records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Restaurant record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Restaurant.prisma().create_many(
            data=[
                {
                    # data to create a Restaurant record
                    'name': 'caghgfbggd',
                    'yelpId': 'bbidjbbjaa',
                    'latitude': 'bfijhaejdd',
                    'longitude': 'bcedehfiji',
                },
                {
                    # data to create a Restaurant record
                    'name': 'bdgjicijhb',
                    'yelpId': 'bghifjdeia',
                    'latitude': 'eadfcbbcb',
                    'longitude': 'geihgahba',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.RestaurantWhereUniqueInput,
        include: Optional[types.RestaurantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Restaurant record.

        Parameters
        ----------
        where
            Restaurant filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The deleted Restaurant record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        restaurant = Restaurant.prisma().delete(
            where={
                'id': 'gahdcdhbj',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.RestaurantWhereUniqueInput,
        include: Optional[types.RestaurantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Restaurant record.

        Parameters
        ----------
        where
            Restaurant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The found Restaurant record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        restaurant = Restaurant.prisma().find_unique(
            where={
                'id': 'begiijahea',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.RestaurantWhereUniqueInput,
        include: Optional[types.RestaurantInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Restaurant record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Restaurant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The found Restaurant record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        restaurant = Restaurant.prisma().find_unique_or_raise(
            where={
                'id': 'gcjadjaaf',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
        include: Optional[types.RestaurantInclude] = None,
        order: Optional[Union[types.RestaurantOrderByInput, List[types.RestaurantOrderByInput]]] = None,
        distinct: Optional[List[types.RestaurantScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Restaurant records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Restaurant records returned
        skip
            Ignore the first N results
        where
            Restaurant filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Restaurant model
        order
            Order the returned Restaurant records by any field
        distinct
            Filter Restaurant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Restaurant]
            The list of all Restaurant records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Restaurant records
        restaurants = Restaurant.prisma().find_many(take=10)

        # find the first 5 Restaurant records ordered by the yelpId field
        restaurants = Restaurant.prisma().find_many(
            take=5,
            order={
                'yelpId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
        include: Optional[types.RestaurantInclude] = None,
        order: Optional[Union[types.RestaurantOrderByInput, List[types.RestaurantOrderByInput]]] = None,
        distinct: Optional[List[types.RestaurantScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Restaurant record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Restaurant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Restaurant model
        order
            Order the returned Restaurant records by any field
        distinct
            Filter Restaurant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Restaurant
            The first Restaurant record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Restaurant record ordered by the latitude field
        restaurant = Restaurant.prisma().find_first(
            skip=1,
            order={
                'latitude': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
        include: Optional[types.RestaurantInclude] = None,
        order: Optional[Union[types.RestaurantOrderByInput, List[types.RestaurantOrderByInput]]] = None,
        distinct: Optional[List[types.RestaurantScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Restaurant record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Restaurant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Restaurant model
        order
            Order the returned Restaurant records by any field
        distinct
            Filter Restaurant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Restaurant
            The first Restaurant record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Restaurant record ordered by the longitude field
        restaurant = Restaurant.prisma().find_first_or_raise(
            skip=1,
            order={
                'longitude': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.RestaurantUpdateInput,
        where: types.RestaurantWhereUniqueInput,
        include: Optional[types.RestaurantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Restaurant record.

        Parameters
        ----------
        data
            Restaurant record data specifying what to update
        where
            Restaurant filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The updated Restaurant record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        restaurant = Restaurant.prisma().update(
            where={
                'id': 'bcbebgiaic',
            },
            data={
                # data to update the Restaurant record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.RestaurantWhereUniqueInput,
        data: types.RestaurantUpsertInput,
        include: Optional[types.RestaurantInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Restaurant filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Restaurant model

        Returns
        -------
        prisma.models.Restaurant
            The created or updated Restaurant record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        restaurant = Restaurant.prisma().upsert(
            where={
                'id': 'ijigbdcbj',
            },
            data={
                'create': {
                    'id': 'ijigbdcbj',
                    'name': 'bdgjicijhb',
                    'yelpId': 'bghifjdeia',
                    'latitude': 'eadfcbbcb',
                    'longitude': 'geihgahba',
                },
                'update': {
                    'name': 'bdgjicijhb',
                    'yelpId': 'bghifjdeia',
                    'latitude': 'eadfcbbcb',
                    'longitude': 'geihgahba',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.RestaurantUpdateManyMutationInput,
        where: types.RestaurantWhereInput,
    ) -> int:
        """Update multiple Restaurant records

        Parameters
        ----------
        data
            Restaurant data to update the selected Restaurant records to
        where
            Filter to select the Restaurant records to update

        Returns
        -------
        int
            The total number of Restaurant records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Restaurant records
        total = Restaurant.prisma().update_many(
            data={
                'id': 'gfidhicai'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Restaurant records present in the database

        Parameters
        ----------
        select
            Select the Restaurant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Restaurant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RestaurantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Restaurant.prisma().count()

        # results: prisma.types.RestaurantCountAggregateOutput
        results = Restaurant.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.RestaurantCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
    ) -> types.RestaurantCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.RestaurantCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RestaurantWhereInput] = None,
        cursor: Optional[types.RestaurantWhereUniqueInput] = None,
    ) -> Union[int, types.RestaurantCountAggregateOutput]:
        """Count the number of Restaurant records present in the database

        Parameters
        ----------
        select
            Select the Restaurant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Restaurant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RestaurantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Restaurant.prisma().count()

        # results: prisma.types.RestaurantCountAggregateOutput
        results = Restaurant.prisma().count(
            select={
                '_all': True,
                'yelpId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RestaurantCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.RestaurantWhereInput] = None
    ) -> int:
        """Delete multiple Restaurant records.

        Parameters
        ----------
        where
            Optional Restaurant filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Restaurant records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Restaurant records
        total = Restaurant.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.RestaurantScalarFieldKeysT'],
        *,
        where: Optional['types.RestaurantWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RestaurantAvgAggregateInput'] = None,
        sum: Optional['types.RestaurantSumAggregateInput'] = None,
        min: Optional['types.RestaurantMinAggregateInput'] = None,
        max: Optional['types.RestaurantMaxAggregateInput'] = None,
        having: Optional['types.RestaurantScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RestaurantCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RestaurantScalarFieldKeysT', 'types.SortOrder'], List[Mapping['types.RestaurantScalarFieldKeysT', 'types.SortOrder']]]] = None,
    ) -> List['types.RestaurantGroupByOutput']:
        """Group Restaurant records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Restaurant fields to group records by
        where
            Restaurant filter to select records
        take
            Limit the maximum number of Restaurant records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RestaurantGroupByOutput]
            A list of dictionaries representing the Restaurant record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Restaurant records by latitude values
        # and count how many records are in each group
        results = Restaurant.prisma().group_by(
            ['latitude'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models